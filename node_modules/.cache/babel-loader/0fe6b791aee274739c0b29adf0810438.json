{"ast":null,"code":"var _jsxFileName = \"/home/go-groups/Desktop/React-Learning/mapping-practice/src/component/App.jsx\";\nimport React from \"react\";\nimport emojipedia from \"./../emojipedia\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  var _this = this;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"emojipedia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"dl\", {\n      className: \"dictionary\",\n      children: emojipedia.map(function (emojipedi) {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          name: emojipedi.name,\n          emoji: emojipedi.emoji,\n          meaning: emojipedi.meaning\n        }, emojipedi.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 8\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App; // var numbers = [3, 56, 2, 48, 5];\n// const newNumbers = numbers.map(x => x * x);\n//Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map( x => x * 2);\n////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(num => num < 10);\n//Reduce - Accumulate a value by doing something to each item in an array.\n//const newNumber = numbers.reduce((accumulator, currentNumber) => accumulator + currentNumber);\n//Find - find the first item that matches from an array.\n// const newNumber = numbers.find(num => num > 10);\n//FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(num => num > 10);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/go-groups/Desktop/React-Learning/mapping-practice/src/component/App.jsx"],"names":["React","emojipedia","Card","App","map","emojipedi","name","emoji","meaning","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,sBACE;AAAA,4BACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBACCF,UAAU,CAACG,GAAX,CAAe,UAAAC,SAAS;AAAA,4BACxB,QAAC,IAAD;AAA0B,UAAA,IAAI,EAAGA,SAAS,CAACC,IAA3C;AAAiD,UAAA,KAAK,EAAID,SAAS,CAACE,KAApE;AAA2E,UAAA,OAAO,EAAGF,SAAS,CAACG;AAA/F,WAAYH,SAAS,CAACI,EAAtB;AAAA;AAAA;AAAA;AAAA,iBADwB;AAAA,OAAxB;AADD;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KAdQN,G;AAgBT,eAAeA,GAAf,C,CAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["import React from \"react\";\nimport emojipedia from \"./../emojipedia\"\n\nimport Card from \"./Card\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>\n        <span>emojipedia</span>\n      </h1>\n      <dl className=\"dictionary\">\n      {emojipedia.map(emojipedi => \n      (<Card key= {emojipedi.id} name ={emojipedi.name} emoji = {emojipedi.emoji} meaning ={emojipedi.meaning}  />)\n        )}\n      </dl>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n// var numbers = [3, 56, 2, 48, 5];\n\n// const newNumbers = numbers.map(x => x * x);\n\n//Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map( x => x * 2);\n\n////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(num => num < 10);\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n//const newNumber = numbers.reduce((accumulator, currentNumber) => accumulator + currentNumber);\n\n//Find - find the first item that matches from an array.\n// const newNumber = numbers.find(num => num > 10);\n\n//FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(num => num > 10);"]},"metadata":{},"sourceType":"module"}